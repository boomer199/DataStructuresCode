Note: All files can be run seperately as they all have their own main method, even though they are in the same project file. 
      Just run each one seperately as you wont see them all if you run it just once.

ANSWERS TO THEORY QUESTIONS

1. x, y, z

2. z, y, x

3. myQueue.enqueue("Jane"); --> Adds "Jane" to front of queue
3. myQueue.enqueue("Jess"); --> Adds "Jess" to queue
3. myQueue.enqueue("Jill"); --> Adds "Jill" to queue
3. myQueue.enqueue(myQueue.dequeue()); --> Takes "Jane" from front of queue and adds it to the back
3. myQueue.enqueue(myQueue.getFront()); --> Adds "Jess" to queue
3. myQueue.enqueue("Jim"); --> Adds "Jim" to queue
3. String name = myQueue.dequeue(); --> Makes a variable called name with the value "Jess" and removes "Jess" from queue
3. myQueue.enqueue(myQueue.getFront()); --> Adds "Jill" to back of queue
3. FINAL ANSWER: "Jill" "Jane" "Jess" "Jim"  "Jill"

4. myDeque.addToFront("Jim"); --> "Jim"
4. myDeque.addToFront("Jess"); --> "Jess" "Jim" 
4. myDeque.addToBack("Jill"); --> "Jess" "Jim" "Jill"
4. myDeque.addToBack("Jane"); --> "Jess" "Jim" "Jill" "Jane"
4. String name = myDeque.removeFront(); --> "Jim" "Jill" "Jane"
4. myDeque.addToBack(name); -->  "Jim" "Jill" "Jane" "Jess"
4. myDeque.addToBack(myDeque.getFront()); --> "Jim" "Jill" "Jane" "Jess" "Jim"
4. myDeque.addToFront(myDeque.removeBack()); --> "Jim" "Jim" "Jill" "Jane" "Jess" 
4. myDeque.addToFront(myDeque.getBack()); --> "Jess" "Jim" "Jim" "Jill" "Jane" "Jess" 

5. myPriorityQueue.add("Jim"); --> "Jim"
5. myPriorityQueue.add("Jess"); --> "Jim" "Jess"
5. myPriorityQueue.add("Jill"); --> "Jim" "Jess" "Jill"
5. myPriorityQueue.add("Jane"); --> "Jim" "Jess" "Jill" "Jane"
5. String name = myPriorityQueue.remove(); --> "Jim" "Jess" "Jill" 
5. myPriorityQueue.add(name); --> "Jim" "Jess" "Jill" "Jane"
5. myPriorityQueue.add(myPriorityQueue.peek()); --> "Jim" "Jess" "Jill" "Jane" "Jim"
5. myPriorityQueue.add("Jim"); --> "Jim" "Jess" "Jill" "Jane" "Jim" "Jim"
5. myPriorityQueue.remove(); --> "Jim" "Jess" "Jill" "Jim" "Jim"

6. Consider strings that can be split so that their first half is the same as their second half (ignoring blanks, punctuation, and case).
6. 
6. Step 1: Get rid of commas and spaces and ignore them
6. Step 2: Split array in half and put characters into seperate queues
6. Step 3: Dequeue same position in queue from both queues and compare them
6. Step 4: Repeat step 3 until done, return false if not equal